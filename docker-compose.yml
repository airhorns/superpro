version: "3.6"

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-gems:
    driver: local

services:
  nginx:
    image: nginx
    ports:
      - 80:30
      - 443:443
      - 3034:3034
    restart: on-failure
    volumes:
      - ./config/docker-compose/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./config/docker-compose/server.crt:/etc/nginx/conf.d/server.crt
      - ./config/docker-compose/server.key:/etc/nginx/conf.d/server.key

  postgres:
    image: postgres:11.2
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data:delegated
    restart: on-failure
    environment:
      POSTGRES_USER: superpro
      POSTGRES_DB: superpro

  redis:
    image: redis:4-alpine
    ports:
      - 6379:6379
    volumes:
      - redis-data:/var/lib/redis:delegated
    restart: on-failure
    command: redis-server --appendonly yes

  jobs:
    image: gcr.io/superpro-production/core:c59912cd827d6e9568a6edbdb52e181c60719bf5
    command: bundle exec que -q default -q mailers
    restart: on-failure
    volumes:
      - ./:/app:delegated
    environment:
      RAILS_ENV: development

  cubeserver:
    image: gcr.io/superpro-production/cubeserver:3a4f84f309478c609f1ad7a8c2979eb5d77aae3b
    ports:
      - 4001:4000
    restart: on-failure
    environment:
      NODE_ENV: development
      CUBEJS_DB_HOST: postgres
      CUBEJS_DB_TYPE: postgres
      CUBEJS_DB_NAME: superpro_development
      CUBEJS_DB_USER: superpro
      CUBEJS_API_SECRET: testdevelopmentapisecret
      REDIS_URL: redis://redis:6379/2

  singer-importer:
    image: gcr.io/superpro-production/singer-importer:b57f23668942a41662142071a29bc1715188f002
    ports:
      - 4002:5000
    restart: on-failure
    environment:
      FLASK_ENV: development
      TARGET_POSTGRES_HOST: postgres
      TARGET_POSTGRES_DATABASE: superpro_development
      TARGET_POSTGRES_USERNAME: superpro
      AUTH_TOKENS: testdevelopmentapisecret
      REDIS_URL: redis://redis:6379/3
