version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.3.0
jobs:
  lint_javascript:
    docker:
      - image: circleci/node:11.9
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache: &node_dependencies_restore_cache
          keys:
            - node-v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - node-v2-dependencies-{{ .Branch }}-
            - node-v2-dependencies
      - run: &node_dependencies
          name: Install node dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          paths:
            - ~/.cache/yarn
          key: node-v2-dependencies-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Run javascript linters
          command: yarn run lint

  lint_ruby:
    docker:
      - image: circleci/ruby:2.6.2-node
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache: &ruby_dependencies_restore_cache
          keys:
            - ruby-v1-dependencies-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - ruby-v1-dependencies-{{ .Branch }}-
            - ruby-v1-dependencies-
      - run: &ruby_dependencies
          name: Install Ruby dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle
      - save_cache:
          paths:
            - ./vendor/bundle
          key: ruby-v1-dependencies-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      - run:
          name: Run rufo linter
          command: bundle exec rufo --check app config lib test
      - run:
          name: Run rubocop linter
          command: bundle exec rubocop

  test_ruby:
    docker: &backend_docker_setup
      - image: circleci/ruby:2.6.2-node
        environment:
          SECRET_KEY_BASE: value-needed-to-boot-app
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: flurish
          POSTGRES_DB: flurish_test
      - image: circleci/redis:4-alpine
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache: *ruby_dependencies_restore_cache
      - run: *ruby_dependencies
      - restore_cache: *node_dependencies_restore_cache
      - run: *node_dependencies
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Load schema
          command: |
            sudo apt update && sudo apt install postgresql-client
            bundle exec rake db:prepare --trace
      - run:
          name: Run tests
          command: |
            TEST_FILES="$(circleci tests glob "test/**/*_test.rb" | circleci tests split --split-by=timings)"
            bundle exec rake test $TEST_FILES
      - store_test_results:
          path: test/reports

  test_javascript:
    docker:
      - image: circleci/node:11.9
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache: *node_dependencies_restore_cache
      - run: *node_dependencies
      - run:
          name: Run tests
          command: JEST_JUNIT_OUTPUT_DIR=test/reports yarn run test --ci --reporters=default --reporters=jest-junit
      - store_test_results:
          path: test/reports

  test_cypress:
    docker: *backend_docker_setup
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache: *ruby_dependencies_restore_cache
      - run: *ruby_dependencies
      - restore_cache: *node_dependencies_restore_cache
      - run: *node_dependencies
      - run:
          name: Install cypress apt dependencies
          command: sudo apt update && sudo apt install xvfb libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2
      - run:
          name: Configure nginx & setup SSL
          command: |
            sudo apt install libnss3-tools nginx postgresql-client
            sudo cp .circleci/nginx.conf /etc/nginx/sites-enabled/default
            wget -O mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.3.0/mkcert-v1.3.0-linux-amd64
            chmod +x mkcert
            ./mkcert -install
            ./mkcert -cert-file .circleci/server.crt -key-file .circleci/server.key ggt.dev admin.ggt.dev app.ggt.dev auth.ggt.dev assets.ggt.dev cube.ggt.dev
      - run:
          name: Set up database
          command: RAILS_ENV=integration_test bin/rails db:prepare
      - run:
          name: Compile assets for Cypress
          command: RAILS_ENV=integration_test NODE_ENV=production bin/webpack
      - run:
          name: Run NGINX
          command: sudo nginx -g 'daemon off;'
          background: true
      - run:
          name: Run Rails server
          command: RAILS_ENV=integration_test bin/rails server
          background: true
      - run:
          name: Wait for server
          command: dockerize -wait tcp://localhost:3000 -timeout 1m
      - run:
          name: Run cypress tests
          command: yarn run cypress run --project ./test --reporter junit --reporter-options "mochaFile=test/results/cypress-test-output.xml"
      - run:
          name: Run uncommitted changes tests
          command: bin/rails test test/integration/uncommitted_changes_test.rb # this test requires a running dev server to introspect the GraphQL schema so we run it here where that's all set up
      - store_test_results:
          path: test/results
      - store_artifacts:
          path: test/cypress

  build_docker:
    docker:
      - image: circleci/node
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Build docker container
          command: docker build -t gcr.io/omp-core/core:$CIRCLE_SHA1 .
      - gcp-cli/install
      - gcp-cli/initialize
      - run:
          name: Push docker container
          command: gcloud auth configure-docker && docker push gcr.io/omp-core/core:$CIRCLE_SHA1

  deploy:
    docker:
      - image: circleci/ruby:2.6.2-node
    steps:
      - gcp-cli/install
      - gcp-cli/initialize
      - checkout
      - restore_cache: *ruby_dependencies_restore_cache
      - run: *ruby_dependencies
      - run:
          name: Configure gcloud k8s context
          command: |
            sudo apt-get install kubectl
            gcloud container clusters get-credentials beta
      - run:
          name: Deploy
          command: config/deploy/deploy.sh

workflows:
  version: 2
  build_test_push:
    jobs:
      - test_ruby
      - lint_ruby
      - lint_javascript
      - test_javascript
      - test_cypress
      - build_docker:
          context: flurish-gke
      - deploy:
          context: flurish-gke
          requires:
            - test_ruby
            - lint_ruby
            - test_javascript
            - lint_javascript
            - build_docker
          filters:
            branches:
              only: master
