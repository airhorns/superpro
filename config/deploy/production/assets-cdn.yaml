# Assets are served in a pretty weird way to appease Larry and Sergei.
# In order to take advantage of the cheap and Google-native Cloud CDN, we need to use a GKE Ingress provider to serve our resources, so that we can pass it the BackendConfig that sets up the CDN all nice and good. We usually use nginx ingresses cause they're more featureful, but I wasn't able to figure out a good way of configuring the CDN to point to an ingress resource in a reproducible way.
# So, we have the public assets.superpro.io ingress accepting traffic. The assets are actually stored in a Google Cloud Storage bucket so that A) they're super available and B) the asset availability is permanent. Clients can request old assets if they're running an old version of the client, so they need to be stored somewhere "global" such that they exist beyond the life of the container they're housed in.
# In order to serve the assets from the bucket, we need something to read them and serve them to this ingress resource. Ideally, we could use a Serivce of type ExternalName and point the ingress at that, but sadly, Google Cloud load balancers don't support that.
# Google Cloud load balancers also support serving files directly from buckets, but, that can't be configured via the Kubernetes Ingress resource or BackendConfig CRD. See https://github.com/kubernetes/ingress-gce/issues/33. We could just configure it manually with a *gasp* mouse and keyboard to be custom and totally outside the k8s lifecycle, but, cert management then becomes an issue. Because that configuration is all manual and outside of the k8s realm, cert-manager doesn't know anything about the SSL cert the load balancer is configured with, and won't renew it, so we'd have to reconfigure the load balancer every 3 months. Womp womp.
# So, we need the Ingress to point to a real service, and thus we turn to trusty ole NGINX. The chain looks like this:
#
# Public    ->    Google Cloud Load Balancer    -> K8S web-assets Service   -> K8S web-assets NGINX deployment   -> Google Cloud Storage bucket
#              ^ is provisioned by this Ingress     ^ created below             ^ created below                     ^ via HTTP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: assets-ingress
  annotations:
    kubernetes.io/ingress.class: gce
spec:
  tls:
    - secretName: assets.superpro.io-production
      hosts:
        - assets.superpro.io
  rules:
    - host: assets.superpro.io
      http:
        paths:
          - backend:
              serviceName: web-assets-proxy
              servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: assets-test-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/client-body-buffer-size: 2M
    nginx.ingress.kubernetes.io/proxy-body-size: 10M
spec:
  rules:
    - host: assets-test.superpro.io
      http:
        paths:
          - backend:
              serviceName: web-assets-proxy
              servicePort: 80
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: web-assets-proxy
  name: web-assets-proxy
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"80":"assets-backend-config"}}'
spec:
  type: NodePort
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    service: web-assets-proxy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: web-assets-proxy-config
data:
  default.conf: |
    upstream google_cloud_storage {
      server core-assets-gsbxqmgsbxqm.superpro.io;
    }

    server {
      listen                  80;
      server_name             _;
      root                    /usr/share/nginx/html;

      location /healthz {
          stub_status;
          allow all;
      }

      location / {
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header Host core-assets-gsbxqmgsbxqm.superpro.io;
        proxy_pass http://google_cloud_storage;
        proxy_redirect off;
        port_in_redirect off;

        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
      }
    }
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    service: web-assets-proxy
  name: web-assets-proxy
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: web-assets-proxy
    spec:
      containers:
        - name: nginx
          image: nginx:1.17
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-configs
              mountPath: /etc/nginx/conf.d
          readinessProbe:
            httpGet:
              path: /healthz
              port: 80
            periodSeconds: 1
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 10
      restartPolicy: Always
      volumes:
        - name: nginx-configs
          configMap:
            name: web-assets-proxy-config
